package dao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;

import javax.annotation.Priority;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.NotAuthorizedException;
import javax.ws.rs.Priorities;
import javax.ws.rs.ext.Provider;

@Secured
@Provider
@Priority(Priorities.AUTHENTICATION)
public class AuthenticationFilter implements ContainerRequestFilter {

	@Override
    public void filter(ContainerRequestContext requestContext) throws IOException {
		
		// Get the HTTP Authorization header from the request
        String authorizationHeader = 
            requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);
        
        // Check if the HTTP Authorization header is present and formatted correctly 
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            throw new NotAuthorizedException("Authorization header must be provided");
        }
        
     // Extract the token from the HTTP Authorization header
        String token = authorizationHeader.substring("Token".length()).trim();
        
        try {
            // Validate the token
            validateToken(token);
        } catch (Exception e) {
            requestContext.abortWith(
                Response.status(Response.Status.UNAUTHORIZED).build());
        }
	}
	
    private void validateToken(String token) throws Exception {
        // Check if it was issued by the server and if it's not expired
        // Throw an Exception if the token is invalid
    	try {
			String query;
			query = "INSERT INTO adherent "
					+ "(login, mdp, nom, prenom, datenaissance, rue, cp, ville, mail) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
			Connection connection =  ConnexionBDD.getInstance().getCnx();
			PreparedStatement ps = connection.prepareStatement(query);
			ps.setString(1, token);
			ps.executeQuery();
		}
		catch(Exception e) {
			throw e;
		}
    }
}
